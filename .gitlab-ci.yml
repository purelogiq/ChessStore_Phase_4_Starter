# Phase 3
before_script:
# Print status
  - echo -e "\e[33m+------------------------+\n|   SETTING UP PROJECT   |\n+------------------------+\e[0m"
# Install gems the Docker image may not have
  - bundle install --jobs $(nproc) "${FLAGS[@]}"
# Set up the test database
  - bundle exec rake db:migrate:reset RAILS_ENV=test

test:
  script:
# Run their unit tests, return true so that even if their unit tests fail we can continue with their other tests
    - echo -e "\e[33m+------------------------------+\n|   RUNNING THEIR UNIT TESTS   |\n+------------------------------+\e[0m"
    - bundle exec rake test:units || true
# Run their controller tests, return true so that even if their controller tests fail we can continue with their other tests
    - echo -e "\e[33m+------------------------------------+\n|   RUNNING THEIR CONTROLLER TESTS   |\n+------------------------------------+\e[0m"
    - bundle exec rake test:functionals || true
# Run their controller tests, return if our solution project exists then continue on to that, otherwise return minitest's exit code
    - echo -e "\e[33m+------------------------------+\n|   RUNNING THEIR VIEW TESTS   |\n+------------------------------+\e[0m"
    - bundle exec cucumber || [ -d /home/sol ]
# Do the same but replacing our test cases if they exist
    - if [ -d /home/sol ]; then echo -e "\e[33m+----------------------------+\n|   RUNNING OUR UNIT TESTS   |\n+----------------------------+\e[0m"; fi
    - if [ -d /home/sol ]; then rm -rf ./test && cp -r /home/sol/test ./ && bundle exec rake test:units; fi
    - if [ -d /home/sol ]; then echo -e "\e[33m+----------------------------------+\n|   RUNNING OUR CONTROLLER TESTS   |\n+----------------------------------+\e[0m"; fi
    - if [ -d /home/sol ]; then rm -rf ./features && cp -r /home/sol/features ./ && bundle exec rake test:functionals; fi
    - if [ -d /home/sol ]; then echo -e "\e[33m+----------------------------+\n|   running OUR view tests   |\n+----------------------------+\e[0m"; fi
    - if [ -d /home/sol ]; then bundle exec cucumber; fi
